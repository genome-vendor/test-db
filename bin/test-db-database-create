#!/usr/bin/env perl

use TestDbServer::CmdLine qw(get_user_agent url_for assert_success parse_opts);
use LWP;
use JSON qw(decode_json);

my $opts = parse_opts('owner=s', 'based-on=s', 'timeout=i', 'bash', 'short-help', 'help');
print_short_help() if ($opts->{'short-help'});
print_help() if ($opts->{help});

my $ua = get_user_agent($opts->{timeout});
my @options = make_post_options($opts);
my $req = HTTP::Request->new(POST => url_for('databases', \@options));
my $rsp = $ua->request($req);
assert_success $rsp;

my $new_db = decode_json($rsp->content);

my $output_format;
if ($opts->{bash}) {
    $output_format = 'TESTDBSERVER_DB_NAME=%s TESTDBSERVER_DB_HOST=%s TESTDBSERVER_DB_PORT=%s';
} else {
    $output_format = "CREATED %s at %s:%s\n";
}
printf($output_format, @$new_db{'name','host','port'});
exit 0;

sub make_post_options {
    my $opts = shift;
    my @options;

    push(@options, owner => $opts->{owner}) if $opts->{owner};
    push(@options, based_on => $opts->{'based-on'}) if $opts->{'based-on'};

    return @options;
}

sub print_short_help {
    print "create a test database\n";
    exit;
}

sub print_help {
    print <<"EOS";
Usage: $0 [--owner <owner>] [--based-on <template>] [--bash]

Create a new test database.  You must specify either --owner or --based-on,
but not both.

If run with --owner, it creates a new, empty test database with the given
owner.  This owner must already exist as a role on the database server.

If run with --based-on, it creates a test database using the named template.

The --bash option changes the output to be a short, bash-compatible script
that will set the shell variables TESTDBSERVER_DB_NAME, TESTDBSERVER_DB_HOST
and TESTDBSERVER_DB_PORT to the name, host and port of the created database.
EOS
    exit;
}

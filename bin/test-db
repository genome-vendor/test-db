#!/usr/bin/perl

# Entry point for the client-side command-line tool for the test_db_server REST service

use File::Basename qw(fileparse);
use File::Spec;

use TestDbServer::CmdLine;

use strict;
use warnings;

alter_perl5lib_for_testdbserver_libs();

my $base_command_path = File::Spec->canonpath($0);
if ($base_command_path !~ m#/# and -e $base_command_path) {
    # run from the path or current directory
    $base_command_path = './' . $base_command_path;
}

my($command_to_run, @sub_command_args) = TestDbServer::CmdLine::split_into_command_to_run_and_args($base_command_path, @ARGV);

if ($command_to_run eq $base_command_path) {
    show_help($base_command_path);
} else {
    exec($command_to_run, @sub_command_args);
}

sub show_help {
    my $parsed_sub_command = shift;
    
    my @sub_commands = TestDbServer::CmdLine::find_available_sub_command_paths($parsed_sub_command);
    
    my @help;
    my $remove_from_beginning = length($parsed_sub_command);
    foreach my $cmd ( @sub_commands ) {
        my $short_help = `$cmd --short-help`;
        $short_help =~ s/\n.*//s;
        my $sub_cmd = substr($cmd,
                             $remove_from_beginning+1);
        $sub_cmd =~ s/-/ /g;
        push @help, [ $sub_cmd, $short_help ];
    }

    my $max_width = -1;
    foreach my $help ( @help ) {
        my $length = length($help->[0]);
        $max_width = $length if ($length > $max_width);
    }
    print "$parsed_sub_command has these available sub-commands:\n";
    $max_width += 2;
    foreach my $help ( @help ) {
        printf("%-${max_width}s %s\n", @$help);
    }
}

sub alter_perl5lib_for_testdbserver_libs {
    my $dir = File::Spec->canonpath( (fileparse($INC{'TestDbServer/CmdLine.pm'}))[1] );
    my @dirs = File::Spec->splitdir($dir);
    pop @dirs; # remove 'TestDbServer'
    $dir = File::Spec->catdir(@dirs);
    $ENV{PERL5LIB} = join(':', $dir, $ENV{PERL5LIB});
}

GET /

Get basic server information

Returns 200 and JSON in the body

{
    template_count: Integer - count of the templates stored
    database_count: Integer - count of live databases
}

----------------------------------------------------

GET /templates

Get a list of the available database dumps/templates

Returns 200 and JSON in the body
[
    <id>: String, unique identifier for the dump
    <id>,
    ...
]

------------------------------------------------------

GET /templates?<field>=<value>
GET /templates?<field>=<value>&<field=<value>&...

Get a list of template IDs that match the given filter

Returns 200 and JSON in the body
[ <id>, <id>, ... ]

Returns 400 if one of the fields is not appropriate

---------------------------------------------------

GET /templates/<id>

Get info about a particular template

Returns 200 and JSON in the body
{
    id: String
    name: String - Short, human readable name
    owner: String - Database role, owner of the databases created from
                    this template
    note: String - human readable info about this template
}

Returns 404 if there's no template with that ID

-------------------------------------------------------

POST /templates?based_on=<database-id>&name=<name>

Dump the named database as a new template.  Also accepts the 'note' param.
'owner' is inherited from the given database-id.

Returns 201 if successful and the URL of the new uploaded thing in the Location header
Returns 404 if there's no database with that ID
Returns 409 if there's already a template with that name

--------------------------------------------------------

DELETE /templates/<id>

Delete a template.

Returns 204 if successful.
Returns 404 if there is no template with that id.

-------------------------------------------------------

GET /databases

Get a list of all available databases.

Returns 200 and JSON in the body
[   <id> : String, identifer for the database
    <id>,
    ...
]

------------------------------------------------

GET /databases?<field>=<value>
GET /databases?<field>=<value>&<field=<value>&...

Get a list of database IDs that match the given filter

Returns 200 and JSON in the body
[ <id>, <id>, ... ]

Returns 400 if one of the fields is not appropriate

-------------------------------------------------

GET /databases/<id>

Get info about a particular database

Returns 200 and JSON in the body
{
    id: String - identifier for this database
    host: String - hostname for the DB
    port: Integer - port for the DB
    name: String - name for the DB
    owner: String - Owner for this DB
    expires: Integer - Unix time when this database will be automatically deleted
}

-------------------------------------------------

POST /databases?owner=<owner>

Create a brand new, empty database.  The system will assign a random database name.

Returns 201 and JSON in the body
{
    id: String - identifier for this database
    host: String - hostname for the DB
    port: Integer - port for the DB
    name: String - name for the DB
    owner: String - Owner for this DB
    expires: Integer - Unix time when this database will be automatically deleted
}
The Location header will be the URL for this entity

-----------------------------------------------------

POST /databases?based_on=<template-id>

Create a new database and populate it with the given database template

Returns 201 and JSON in the body
{
    id: String - identifier for this database
    host: String - hostname for the DB
    port: Integer - port for the DB
    name: String - name for the DB
    owner: String - Owner for this DB
    expires: Integer - Unix time when this database will be automatically deleted
}
The Location header will be the URL for this entity

Returns 404 if there is no template with that id

---------------------------------------------------------

PATCH /databases/<id>?ttl=<number>

Change the expiration time for the database to the current time plus the given
number of seconds.

Returns 200 and JSON in the body {
    id: String - identifier for this database
    host: String - hostname for the DB
    port: Integer - port for the DB
    name: String - name for the DB
    owner: String - Owner for this DB
    expires: Integer - Unix epoch time when this database will be automatically deleted
}
The Location header will be the URL for this entity

Returns 400 for bad ttls (not positive integer)
Returns 404 if there is no database with that id

----------------------------------------------------------

DELETE /databases/<id>

Delete a database

Returns 204 if successful.
Returns 404 if there is no database with that id.
Returns 409 if that database has connections and cannot be deleted.

----------------------------------------------------------
